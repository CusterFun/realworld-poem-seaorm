//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    #[sea_orm(column_type = "Text", unique)]
    pub username: String,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    #[sea_orm(column_type = "Text")]
    pub bio: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub password_hash: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::article::Entity")]
    Article,
    #[sea_orm(has_many = "super::article_favorite::Entity")]
    ArticleFavorite,
    #[sea_orm(has_many = "super::article_comment::Entity")]
    ArticleComment,
}

impl Related<super::article::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Article.def()
    }
}

impl Related<super::article_favorite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleFavorite.def()
    }
}

impl Related<super::article_comment::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArticleComment.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
